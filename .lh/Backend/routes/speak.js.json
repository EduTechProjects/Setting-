{
    "sourceFile": "Backend/routes/speak.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1688455036884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1688455047444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n const upload = multer({storage});\n \n // POST /upload-audio 경로에 대한 처리\n-router.post(\"/\", upload.single(\"audio\"), async (req, res) => {\n+router.post(\"http://localhost/transcribe\", upload.single(\"audio\"), async (req, res) => {\n     try {\n       // 파일 업로드가 완료되면 speak 모델을 사용하여 음성 처리를 진행\n       const filePath = req.file.path; // 업로드된 파일의 경로\n       const result = await speak.processAudio(filePath);\n"
                },
                {
                    "date": 1688455057906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,66 @@\n+const express = require('express');\n+const speak = require('../schemas/speak');\n+const multer = require(\"multer\");\n+const axios = require('axios');\n+const router = express.Router();\n+\n+//multer 설정어떻게 하지?\n+const storage = multer.diskStorage({\n+    destination : function (req,file, cb) {\n+        cb(null, \"uploads/\") //업로드될 파일의 저장 위치 지정해줬음\n+    },\n+    filename : function(req, res, cb) {\n+        cb(null, \"recording.wav\");\n+    },\n+});\n+\n+const upload = multer({storage});\n+\n+// POST /upload-audio 경로에 대한 처리\n+router.post(\"http://localhost:5000/transcribe\", upload.single(\"audio\"), async (req, res) => {\n+    try {\n+      // 파일 업로드가 완료되면 speak 모델을 사용하여 음성 처리를 진행\n+      const filePath = req.file.path; // 업로드된 파일의 경로\n+      const result = await speak.processAudio(filePath);\n+      // 처리 결과를 클라이언트로 응답\n+      res.json(result);\n+    } catch (error) {\n+      console.error(\"음성 처리 중 오류가 발생했습니다.\", error);\n+      res.status(500).json({ error: \"음성 처리 중 오류가 발생했습니다.\" });\n+    }\n+  });\n+\n+  //POST/speak/:topic 경로에 대한 처리\n+  router.post('/speak/:topic', upload.array('audio', 3), async (req, res) =>{\n+    try {\n+        const topic = req.params.topic;\n+        const questionArr= Questions[topic];\n+        const audioFiles = req.files;\n+\n+        const responses = [];\n+        for(let i=0; i < questionArr.lenth; i++) {\n+            const audioFile = audioFiles[i];\n+            const formData = new FormData();\n+            formData.append('audio', audioFile.buffer, 'recording.wav');\n+\n+            const response = await axios.post('/upload-audio', formData, {\n+                headers : formData.getHeaders(),\n+            });\n+\n+            response.push(response.data);\n+        }\n+        //response 배열에는 각 응답 결과가 들어있음\n+        console.log(responses);\n+\n+        response.sendStatus(200);\n+    } catch(error) {\n+      console.error('오류가 발생했습니다.', error);\n+      res.status(500).json({\n+        error : '오류가 발생했습니다.'\n+      });\n+    }\n+  })\n+\n+\n+  \n+  module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1688455080677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n });\n \n const upload = multer({storage});\n \n-// POST /upload-audio 경로에 대한 처리\n+// POST /transcribe 경로에 대한 처리\n router.post(\"http://localhost:5000/transcribe\", upload.single(\"audio\"), async (req, res) => {\n     try {\n       // 파일 업로드가 완료되면 speak 모델을 사용하여 음성 처리를 진행\n       const filePath = req.file.path; // 업로드된 파일의 경로\n@@ -62,71 +62,5 @@\n   })\n \n \n   \n-  module.exports = router;\n-const express = require('express');\n-const speak = require('../schemas/speak');\n-const multer = require(\"multer\");\n-const axios = require('axios');\n-const router = express.Router();\n-\n-//multer 설정어떻게 하지?\n-const storage = multer.diskStorage({\n-    destination : function (req,file, cb) {\n-        cb(null, \"uploads/\") //업로드될 파일의 저장 위치 지정해줬음\n-    },\n-    filename : function(req, res, cb) {\n-        cb(null, \"recording.wav\");\n-    },\n-});\n-\n-const upload = multer({storage});\n-\n-// POST /upload-audio 경로에 대한 처리\n-router.post(\"http://localhost/transcribe\", upload.single(\"audio\"), async (req, res) => {\n-    try {\n-      // 파일 업로드가 완료되면 speak 모델을 사용하여 음성 처리를 진행\n-      const filePath = req.file.path; // 업로드된 파일의 경로\n-      const result = await speak.processAudio(filePath);\n-      // 처리 결과를 클라이언트로 응답\n-      res.json(result);\n-    } catch (error) {\n-      console.error(\"음성 처리 중 오류가 발생했습니다.\", error);\n-      res.status(500).json({ error: \"음성 처리 중 오류가 발생했습니다.\" });\n-    }\n-  });\n-\n-  //POST/speak/:topic 경로에 대한 처리\n-  router.post('/speak/:topic', upload.array('audio', 3), async (req, res) =>{\n-    try {\n-        const topic = req.params.topic;\n-        const questionArr= Questions[topic];\n-        const audioFiles = req.files;\n-\n-        const responses = [];\n-        for(let i=0; i < questionArr.lenth; i++) {\n-            const audioFile = audioFiles[i];\n-            const formData = new FormData();\n-            formData.append('audio', audioFile.buffer, 'recording.wav');\n-\n-            const response = await axios.post('/upload-audio', formData, {\n-                headers : formData.getHeaders(),\n-            });\n-\n-            response.push(response.data);\n-        }\n-        //response 배열에는 각 응답 결과가 들어있음\n-        console.log(responses);\n-\n-        response.sendStatus(200);\n-    } catch(error) {\n-      console.error('오류가 발생했습니다.', error);\n-      res.status(500).json({\n-        error : '오류가 발생했습니다.'\n-      });\n-    }\n-  })\n-\n-\n-  \n   module.exports = router;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1688455110220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n             const audioFile = audioFiles[i];\n             const formData = new FormData();\n             formData.append('audio', audioFile.buffer, 'recording.wav');\n \n-            const response = await axios.post('/upload-audio', formData, {\n+            const response = await axios.post('http://localhost:5000/transcribe', formData, {\n                 headers : formData.getHeaders(),\n             });\n \n             response.push(response.data);\n"
                }
            ],
            "date": 1688455036884,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst speak = require('../schemas/speak');\nconst multer = require(\"multer\");\nconst axios = require('axios');\nconst router = express.Router();\n\n//multer 설정어떻게 하지?\nconst storage = multer.diskStorage({\n    destination : function (req,file, cb) {\n        cb(null, \"uploads/\") //업로드될 파일의 저장 위치 지정해줬음\n    },\n    filename : function(req, res, cb) {\n        cb(null, \"recording.wav\");\n    },\n});\n\nconst upload = multer({storage});\n\n// POST /upload-audio 경로에 대한 처리\nrouter.post(\"/\", upload.single(\"audio\"), async (req, res) => {\n    try {\n      // 파일 업로드가 완료되면 speak 모델을 사용하여 음성 처리를 진행\n      const filePath = req.file.path; // 업로드된 파일의 경로\n      const result = await speak.processAudio(filePath);\n      // 처리 결과를 클라이언트로 응답\n      res.json(result);\n    } catch (error) {\n      console.error(\"음성 처리 중 오류가 발생했습니다.\", error);\n      res.status(500).json({ error: \"음성 처리 중 오류가 발생했습니다.\" });\n    }\n  });\n\n  //POST/speak/:topic 경로에 대한 처리\n  router.post('/speak/:topic', upload.array('audio', 3), async (req, res) =>{\n    try {\n        const topic = req.params.topic;\n        const questionArr= Questions[topic];\n        const audioFiles = req.files;\n\n        const responses = [];\n        for(let i=0; i < questionArr.lenth; i++) {\n            const audioFile = audioFiles[i];\n            const formData = new FormData();\n            formData.append('audio', audioFile.buffer, 'recording.wav');\n\n            const response = await axios.post('/upload-audio', formData, {\n                headers : formData.getHeaders(),\n            });\n\n            response.push(response.data);\n        }\n        //response 배열에는 각 응답 결과가 들어있음\n        console.log(responses);\n\n        response.sendStatus(200);\n    } catch(error) {\n      console.error('오류가 발생했습니다.', error);\n      res.status(500).json({\n        error : '오류가 발생했습니다.'\n      });\n    }\n  })\n\n\n  \n  module.exports = router;"
        }
    ]
}