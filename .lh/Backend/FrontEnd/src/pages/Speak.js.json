{
    "sourceFile": "Backend/FrontEnd/src/pages/Speak.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1688454895251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1688454903607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n       formData.append(\"audio\", audioBlob, \"recording.wav\");\n \n       //서버로 formdata 전송\n       axios\n-        .post(\"\", formData)\n+        .post(\"http://localhost:5000/\", formData)\n         .then((response) => {\n           console.log(\"업로드가 성공적으로 진행되었습니다!\");\n         })\n         .catch((error) => {\n"
                },
                {
                    "date": 1688454942466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,11 +102,14 @@\n       formData.append(\"audio\", audioBlob, \"recording.wav\");\n \n       //서버로 formdata 전송\n       axios\n-        .post(\"http://localhost:5000/\", formData)\n+        .post(\"http://localhost:5000/transcribe\", formData)\n         .then((response) => {\n           console.log(\"업로드가 성공적으로 진행되었습니다!\");\n+          // 서버에서 응답받은 텍스트를 처리하는 코드 작성\n+          const transcription = response.data.transcription;\n+          // transcription을 처리하는 로직 추가\n         })\n         .catch((error) => {\n           console.error(\"업로드 과정 중 오류가 발생했습니다.\", error);\n         });\n"
                },
                {
                    "date": 1688454968634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,10 +106,9 @@\n         .post(\"http://localhost:5000/transcribe\", formData)\n         .then((response) => {\n           console.log(\"업로드가 성공적으로 진행되었습니다!\");\n           // 서버에서 응답받은 텍스트를 처리하는 코드 작성\n-          const transcription = response.data.transcription;\n-          // transcription을 처리하는 로직 추가\n+          \n         })\n         .catch((error) => {\n           console.error(\"업로드 과정 중 오류가 발생했습니다.\", error);\n         });\n"
                }
            ],
            "date": 1688454895251,
            "name": "Commit-0",
            "content": "import React from \"react\";\nimport Button from \".././components/Common/Button\";\nimport styled from \"styled-components\";\nimport Speaker from \"../components/Speak/Speaker\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport Questions from \".././utils/Questions\";\nimport ColorCode from \".././utils/Palette\";\nimport { useState, useRef } from \"react\";\nimport axios from \"axios\";\n\nconst SpeakContainer = styled.div`\n  background-color: #f5f5f5;\n  text-align: center;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  position: relative;\n`;\n\nconst QuestionContainer = styled.div`\n  background-color: #f5f5f5;\n  font-weight: bold;\n  font-size: 30px;\n  width: 60%;\n  height: 40px;\n  text-align: center;\n  padding-top: 20vh;\n  margin: 0 auto;\n  padding-bottom: 20vh;\n`;\n\nconst ButtonContainer = styled.div`\n  padding-top: 5vh;\n  margin: 0 auto;\n  gap: 30px;\n  justify-items: flex-start;\n  display: flex;\n`;\n\nconst SpeakerWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nconst Speak = () => {\n  const navigate = useNavigate();\n  const { topic } = useParams();\n\n  const questionArr = Questions[topic];\n  const [isFeedbackPage, setIsFeedbackPage] = useState(false);\n  const [showSpeaker, setShowSpeaker] = useState(false);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const currentQuestion = questionArr[currentQuestionIndex];\n\n  const mediaRedorderRef = useRef(null);\n  const audioChunksRef = useRef([]);\n\n  const handleStartClick = () => {\n    setShowSpeaker(true);\n\n    //녹음을 시작하기 전 이전에 녹음한 오디오 청크리스트 초기화\n    audioChunksRef.current = [];\n\n    //녹음을 위한 미디어 스트림 가져오기\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        //MediaRecorder 생성\n        mediaRedorderRef.current = new MediaRecorder(stream);\n\n        //데이터를 받을 때마다 오디오 청크를 추가하기\n        mediaRedorderRef.current.addEventListener(\"dataavailable\", (e) => {\n          if (e.data.size > 0) {\n            audioChunksRef.current.push(e.data);\n          }\n        });\n\n        mediaRedorderRef.current.start();\n      })\n      .catch((error) => {\n        console.error(\"마이크 인식이 불가합니다.\", error);\n      });\n  };\n\n  const handleDoneClick = () => {\n    if (\n      mediaRedorderRef.current &&\n      mediaRedorderRef.current.state === \"recording\"\n    ) {\n      //녹음 중지\n      mediaRedorderRef.current.stop();\n\n      //녹음된 오디로 청크들을 blob으로 변환하기\n      const audioBlob = new Blob(audioChunksRef.current, { type: \"audio/wav\" });\n\n      //Form data 생성하기\n      const formData = new FormData();\n      formData.append(\"audio\", audioBlob, \"recording.wav\");\n\n      //서버로 formdata 전송\n      axios\n        .post(\"\", formData)\n        .then((response) => {\n          console.log(\"업로드가 성공적으로 진행되었습니다!\");\n        })\n        .catch((error) => {\n          console.error(\"업로드 과정 중 오류가 발생했습니다.\", error);\n        });\n    }\n\n    setShowSpeaker(false);\n    setCurrentQuestionIndex((prevIndex) => prevIndex + 1);\n\n    if (currentQuestionIndex === questionArr.length - 1) {\n      setIsFeedbackPage(true);\n    }\n  };\n\n  if (isFeedbackPage) {\n    navigate(\"/feedback\");\n  }\n\n  return (\n    <SpeakContainer>\n      <QuestionContainer>\n        <b style={{ color: ColorCode.SelectBlue, marginRight: \"10px\" }}>\n          Q{currentQuestionIndex + 1}.\n        </b>\n        {currentQuestion}\n      </QuestionContainer>\n      {showSpeaker && (\n        <SpeakerWrapper>\n          <Speaker />\n        </SpeakerWrapper>\n      )}\n      <ButtonContainer>\n        {showSpeaker ? (\n          <Button type={\"3\"} text={\"Done\"} click={handleDoneClick} />\n        ) : (\n          <Button type={\"2\"} text={\"Start\"} click={handleStartClick} />\n        )}\n      </ButtonContainer>\n      <button onClick={handleDoneClick}>done</button>\n    </SpeakContainer>\n  );\n};\n\nexport default Speak;\n"
        }
    ]
}