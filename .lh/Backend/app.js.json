{
    "sourceFile": "Backend/app.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1688361866317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1688361892899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n app.use('/home', homeRouter);\n app.use('/subject', subjectRouter);\n \n \n-const app = express();\n+const app = express()\n \n //앱 서버 포트에 연결하기\n \n app.set('port', process.env.PORT || 3000);\n"
                },
                {
                    "date": 1688361898011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n const logger = require('./logger');\n const redis = require('redis');\n const RedisStore = require('connect-redis')(session);\n \n+const app = express();\n \n dotenv.config();\n //레디스 설정\n const redisClient = redis.createClient({\n@@ -37,10 +38,10 @@\n app.use('/home', homeRouter);\n app.use('/subject', subjectRouter);\n \n \n-const app = express()\n \n+\n //앱 서버 포트에 연결하기\n \n app.set('port', process.env.PORT || 3000);\n app.set('viw engine', 'html');\n"
                },
                {
                    "date": 1688368206505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n })\n \n \n app.get('/', (req, res) =>{\n-    res.sendFile(path.join(__dirname, 'client'))\n+    res.sendFile(path.join(__dirname, 'Front'))\n })\n \n \n //포트 연결\n"
                },
                {
                    "date": 1688368211777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n })\n \n \n app.get('/', (req, res) =>{\n-    res.sendFile(path.join(__dirname, 'Front'))\n+    res.sendFile(path.join(__dirname, 'Frontend/'))\n })\n \n \n //포트 연결\n"
                },
                {
                    "date": 1688368232487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n })\n \n \n app.get('/', (req, res) =>{\n-    res.sendFile(path.join(__dirname, 'Frontend/'))\n+    res.sendFile(path.join(__dirname, 'Frontend/build/'))\n })\n \n \n //포트 연결\n"
                },
                {
                    "date": 1688368240901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n })\n \n \n app.get('/', (req, res) =>{\n-    res.sendFile(path.join(__dirname, 'Frontend/build/'))\n+    res.sendFile(path.join(__dirname, 'Frontend/build/index.html'));\n })\n \n \n //포트 연결\n"
                },
                {
                    "date": 1688368281593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n }\n app.use(session(sessionOption));\n \n //미들웨어 설정 \n-app.use(express.static(path.join(__dirname, 'public')));\n+\n app.use('/upload', express.static(path.join(__dirname, 'uploads')));\n app.use(express.json());\n app.use(express.urlencoded({extended : true}));\n app.use(cookieParser(process.env.COOKIE_SECRET));\n"
                },
                {
                    "date": 1688368286906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,9 @@\n     res.status(err.status || 500);\n     res.render('error'); \n })\n \n+app.use(express.static(path.join(__dirname, 'public')));\n \n app.get('/', (req, res) =>{\n     res.sendFile(path.join(__dirname, 'Frontend/build/index.html'));\n })\n"
                },
                {
                    "date": 1688368294411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n     res.status(err.status || 500);\n     res.render('error'); \n })\n \n-app.use(express.static(path.join(__dirname, 'public')));\n+app.use(express.static(path.join(__dirname, '')));\n \n app.get('/', (req, res) =>{\n     res.sendFile(path.join(__dirname, 'Frontend/build/index.html'));\n })\n"
                },
                {
                    "date": 1688368303476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n     res.status(err.status || 500);\n     res.render('error'); \n })\n \n-app.use(express.static(path.join(__dirname, '')));\n+app.use(express.static(path.join(__dirname, 'FrontEnd/build')));\n \n app.get('/', (req, res) =>{\n     res.sendFile(path.join(__dirname, 'Frontend/build/index.html'));\n })\n"
                },
                {
                    "date": 1688368314008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,10 +101,10 @@\n \n app.use(express.static(path.join(__dirname, 'FrontEnd/build')));\n \n app.get('/', (req, res) =>{\n-    res.sendFile(path.join(__dirname, 'Frontend/build/index.html'));\n-})\n+    res.sendFile(path.join(__dirname, 'FrontEnd/build/index.html'));\n+});\n \n \n //포트 연결\n app.listen(app.get('port' ,()=>{\n"
                },
                {
                    "date": 1688368416684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,11 @@\n app.get('/', (req, res) =>{\n     res.sendFile(path.join(__dirname, 'FrontEnd/build/index.html'));\n });\n \n+app.get('*', function(req, res) )\n \n+\n //포트 연결\n app.listen(app.get('port' ,()=>{\n      console.log('${port} 포트입니다.')\n }))\n"
                },
                {
                    "date": 1688368424755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,11 @@\n app.get('/', (req, res) =>{\n     res.sendFile(path.join(__dirname, 'FrontEnd/build/index.html'));\n });\n \n-app.get('*', function(req, res) )\n+app.get('*', function(req, res) {\n+    res.sendFile(path.join(__))\n+})\n \n \n //포트 연결\n app.listen(app.get('port' ,()=>{\n"
                },
                {
                    "date": 1688368432225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n     res.sendFile(path.join(__dirname, 'FrontEnd/build/index.html'));\n });\n \n app.get('*', function(req, res) {\n-    res.sendFile(path.join(__))\n+    res.sendFile(path.join(__dirname, 'FrontEnd/build/'))\n })\n \n \n //포트 연결\n"
                },
                {
                    "date": 1688369041494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,10 @@\n const RedisStore = require('connect-redis')(session);\n \n const app = express();\n \n+app.use(express.json())\n+\n dotenv.config();\n //레디스 설정\n const redisClient = redis.createClient({\n     url : 'redis ://${process.env.REDIS_HOST}:${process.env.REDIS_PORT}',\n@@ -105,9 +107,9 @@\n     res.sendFile(path.join(__dirname, 'FrontEnd/build/index.html'));\n });\n \n app.get('*', function(req, res) {\n-    res.sendFile(path.join(__dirname, 'FrontEnd/build/'))\n+    res.sendFile(path.join(__dirname, 'FrontEnd/build/index.html'));\n })\n \n \n //포트 연결\n"
                },
                {
                    "date": 1688369059754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,11 @@\n const RedisStore = require('connect-redis')(session);\n \n const app = express();\n \n-app.use(express.json())\n+app.use(express.json());\n+const cors = require('cors');\n+app.use(cors)\n \n dotenv.config();\n //레디스 설정\n const redisClient = redis.createClient({\n"
                },
                {
                    "date": 1688375191280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,13 +20,14 @@\n const logger = require('./logger');\n const redis = require('redis');\n const RedisStore = require('connect-redis')(session);\n \n+\n const app = express();\n \n app.use(express.json());\n const cors = require('cors');\n-app.use(cors)\n+app.use(cors());\n \n dotenv.config();\n //레디스 설정\n const redisClient = redis.createClient({\n"
                },
                {
                    "date": 1688475943203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n const express = require('express');\n-const bodyParser =require('body-parser');\n+const bodyParser = require('body-parser');\n const cookieParser = require('cookie-parser');\n const path = require('path');\n const session = require('express-session');\n const qs = require('qs');\n const mongoose = require('mongoose');\n const morgan = require('morgan');\n const multer = require('multer');\n const dotenv = require('dotenv');\n-const connect = require('/schemas');\n+const connect = require('./schemas');\n const indexRouter = require('./routes/index');\n const speakRouter = require('./routes/speak');\n const feedbackRouter = require('./routes/feedback');\n const homeRouter = require('./routes/home');\n@@ -17,94 +17,124 @@\n const hpp = require('hpp');\n const helmet = require('helmet');\n const csurf = require('csurf');\n const logger = require('./logger');\n+const RedisStore = require('connect-redis')(session);\n const redis = require('redis');\n-const RedisStore = require('connect-redis')(session);\n \n-\n const app = express();\n \n-app.use(express.json());\n const cors = require('cors');\n app.use(cors());\n \n dotenv.config();\n-//레디스 설정\n+//몽구스 연결\n+const dbconnect = () =>{\n+    if (process.env.NODE_ENV !== 'production'){ //개발 모드일때는 debug모드를 사용한다.\n+        mongoose.set('debug', true);\n+    }\n+    mongoose.connect('mongodb://root:nodejs@localhost:27017/?authMechanism=DEFAULT', {\n+       dbName : 'nodejs',\n+       useNewUrlParser : true,\n+       useCreateIndex : true,\n+    } , (error) =>{\n+       if (error) {\n+          console.log('몽고디비 연결 에러', error);\n+       } else {\n+          console.log('몽고디비 연결 성공');\n+       }\n+    });\n+ };\n+ \n+\n+ mongoose.connection.on('error' ,(error)=>{\n+    console.error('몽고디비 연결 에러', error);\n+ })\n+ mongoose.connection.on('disconnected' ,()=>{\n+    conosle.error('몽고디비 연결이 끊겼슘니당. 연결 재시도 하겠습니다.');\n+    dbconnect();\n+ })\n+\n+dbconnect();\n+\n+// Redis 설정\n const redisClient = redis.createClient({\n-    url : 'redis ://${process.env.REDIS_HOST}:${process.env.REDIS_PORT}',\n-    password : process.env.REDIS_PASSWORD,\n-})\n+  url: `redis://${process.env.REDIS_HOST}:${process.env.REDIS_PORT}`,\n+  password: process.env.REDIS_PASSWORD,\n+});\n \n-// Router\n-\n+// 라우터 설정\n app.use('/', indexRouter);\n app.use('/speak', speakRouter);\n app.use('/feedback', feedbackRouter);\n app.use('/home', homeRouter);\n app.use('/subject', subjectRouter);\n \n+// 앱 서버 포트 설정\n+app.set('port', process.env.PORT || 5000);\n+app.set('view engine', 'html');\n \n+const sessionOption = {\n+  resave: false,\n+  saveUninitialized: false,\n+  secret: process.env.COOKIE_SECRET,\n+  cookie: {\n+    httpOnly: true,\n+    secure: false,\n+  },\n+  store: new RedisStore({ client: redisClient }),\n+};\n \n-\n-//앱 서버 포트에 연결하기\n-\n-app.set('port', process.env.PORT || 3000);\n-app.set('viw engine', 'html');\n-\n-\n-\n-if( process.env.NODE_ENV === 'production') {\n-    sessionOption.proxy = true;\n-    app.enable('trust proxy');\n-    app.use(morgan('dombined'));\n-    app.use(helmet({contentSecurityPolicy : false}));\n-    app.use(hpp());\n+if (process.env.NODE_ENV === 'production') {\n+  sessionOption.proxy = true;\n+  app.enable('trust proxy');\n+  app.use(morgan('combined'));\n+  app.use(helmet({ contentSecurityPolicy: false }));\n+  app.use(hpp());\n } else {\n-    app.use(morgan('div'));\n+  app.use(morgan('div'));\n }\n+\n app.use(session(sessionOption));\n \n-//미들웨어 설정 \n-\n+// 미들웨어 설정\n app.use('/upload', express.static(path.join(__dirname, 'uploads')));\n+app.use(express.urlencoded({ extended: true }));\n app.use(express.json());\n-app.use(express.urlencoded({extended : true}));\n app.use(cookieParser(process.env.COOKIE_SECRET));\n-const sessionOption = {\n-    resave : false,\n-    saveUninitialized : false,\n-    secret : process.env.COOKIE_SECRET,\n-    cookie : {\n-        httpOnly : true,\n-        secure : false,\n-    }, \n-    store : new RedisStore({client : redisClient}),\n-}\n \n-//body-parser 미들웨어 설정\n-app.use(bodyParser.urlencoded({extended : false}));\n+// body-parser 미들웨어 설정\n+app.use(bodyParser.urlencoded({ extended: false }));\n app.use(bodyParser.json());\n \n+// 404 에러 처리 미들웨어\n+app.use((req, res, next) => {\n+  const error = new Error(`${req.method} ${req.url} 라우터가 없음🧐`);\n+  error.status = 404;\n+  logger.info('왜않돼?');\n+  logger.error(error.message);\n+  next(error);\n+});\n \n-//404 에러 처리 미들웨어\n-app.use((req,res,next) =>{\n-    const error = new Error('${req.method} ${req.url} 라우터가 없음🧐');\n-    error.status = 404;\n-    logger.info('왜않돼?');\n-    logger.error(error.message);\n-    next(error);\n+// 500 에러 처리 미들웨어\n+app.use((err, req, res, next) => {\n+  res.locals.message = err.message;\n+  res.locals.error = process.env.NODE_ENV !== 'production' ? err : {};\n+  res.status(err.status || 500);\n+  res.render('error');\n+});\n \n-})\n+app.use(express.static(path.join(__dirname, 'public')));\n \n-//500 에러 미들웨어 정의\n-app.use((err, req, res, next)=>{\n-    res.locals.message = err.message;\n-    res.locals.error = process.env.NODE_ENV !== 'production' ? err : {};\n-    res.status(err.status || 500);\n-    res.render('error'); \n-})\n+// MongoDB 연결\n+dbconnect();\n \n+// 앱 서버 시작\n+app.listen(app.get('port'), () => {\n+  console.log(`Server is running on port ${app.get('port')}`);\n+});\n+\n+\n app.use(express.static(path.join(__dirname, 'FrontEnd/build')));\n \n app.get('/', (req, res) =>{\n     res.sendFile(path.join(__dirname, 'FrontEnd/build/index.html'));\n@@ -113,41 +143,20 @@\n app.get('*', function(req, res) {\n     res.sendFile(path.join(__dirname, 'FrontEnd/build/index.html'));\n })\n \n+app.listen(3000, () => {\n+    console.log('서버가 3000번 포트에서 실행 중입니다.');\n+  });\n \n //포트 연결\n-app.listen(app.get('port' ,()=>{\n-     console.log('${port} 포트입니다.')\n-}))\n+// app.listen(app.get('port'), () => {\n+//     console.log(`${app.get('port')} 포트입니다.`);\n+// });\n \n-//몽구스 연결\n-const connect =()=>{\n-    if (process.env.NODE_ENV !== 'production'){ //개발 모드일때는 debug모드를 사용한다.\n-        mongoose.set('debug', true);\n-    }\n-    mongoose.connect('mongodb://url', {\n-       dbName : 'nodejs',\n-       useNewUrlParser : true,\n-       useCreateIndex : true,\n-    } , (error) =>{\n-       if (error) {\n-          console.log('몽고디비 연결 에러', error);\n-       } else {\n-          console.log('몽고디비 연결 성공');\n-       }\n-    });\n- };\n- \n \n- mongoose.connection.on('error' ,(error)=>{\n-    console.error('몽고디비 연결 에러', error);\n- })\n- mongoose.connection.on('disconnected' ,()=>{\n-    conosle.error('몽고디비 연결이 끊겼슘니당. 연결 재시도 하겠습니다.');\n-    connect();\n- })\n- module.exports = connect;\n+\n+ module.exports = app;\n  \n \n \n \n"
                },
                {
                    "date": 1688475958482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n app.use('/home', homeRouter);\n app.use('/subject', subjectRouter);\n \n // 앱 서버 포트 설정\n-app.set('port', process.env.PORT || 5000);\n+app.set('port', process.env.PORT || 8000);\n app.set('view engine', 'html');\n \n const sessionOption = {\n   resave: false,\n"
                },
                {
                    "date": 1688475977772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n app.use('/home', homeRouter);\n app.use('/subject', subjectRouter);\n \n // 앱 서버 포트 설정\n-app.set('port', process.env.PORT || 8000);\n+app.set('port', process.env.PORT || 0);\n app.set('view engine', 'html');\n \n const sessionOption = {\n   resave: false,\n"
                },
                {
                    "date": 1688475999586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n app.use('/home', homeRouter);\n app.use('/subject', subjectRouter);\n \n // 앱 서버 포트 설정\n-app.set('port', process.env.PORT || 0);\n+app.set('port', process.env.PORT || 3000);\n app.set('view engine', 'html');\n \n const sessionOption = {\n   resave: false,\n"
                },
                {
                    "date": 1688477184410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n dbconnect();\n \n // Redis 설정\n const redisClient = redis.createClient({\n-  url: `redis://${process.env.REDIS_HOST}:${process.env.REDIS_PORT}`,\n+  url: ``,\n   password: process.env.REDIS_PASSWORD,\n });\n \n // 라우터 설정\n"
                }
            ],
            "date": 1688361866317,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst bodyParser =require('body-parser');\nconst cookieParser = require('cookie-parser');\nconst path = require('path');\nconst session = require('express-session');\nconst qs = require('qs');\nconst mongoose = require('mongoose');\nconst morgan = require('morgan');\nconst multer = require('multer');\nconst dotenv = require('dotenv');\nconst connect = require('/schemas');\nconst indexRouter = require('./routes/index');\nconst speakRouter = require('./routes/speak');\nconst feedbackRouter = require('./routes/feedback');\nconst homeRouter = require('./routes/home');\nconst subjectRouter = require('./routes/subject');\nconst hpp = require('hpp');\nconst helmet = require('helmet');\nconst csurf = require('csurf');\nconst logger = require('./logger');\nconst redis = require('redis');\nconst RedisStore = require('connect-redis')(session);\n\n\ndotenv.config();\n//레디스 설정\nconst redisClient = redis.createClient({\n    url : 'redis ://${process.env.REDIS_HOST}:${process.env.REDIS_PORT}',\n    password : process.env.REDIS_PASSWORD,\n})\n\n// Router\n\napp.use('/', indexRouter);\napp.use('/speak', speakRouter);\napp.use('/feedback', feedbackRouter);\napp.use('/home', homeRouter);\napp.use('/subject', subjectRouter);\n\n\nconst app = express();\n\n//앱 서버 포트에 연결하기\n\napp.set('port', process.env.PORT || 3000);\napp.set('viw engine', 'html');\n\n\n\nif( process.env.NODE_ENV === 'production') {\n    sessionOption.proxy = true;\n    app.enable('trust proxy');\n    app.use(morgan('dombined'));\n    app.use(helmet({contentSecurityPolicy : false}));\n    app.use(hpp());\n} else {\n    app.use(morgan('div'));\n}\napp.use(session(sessionOption));\n\n//미들웨어 설정 \napp.use(express.static(path.join(__dirname, 'public')));\napp.use('/upload', express.static(path.join(__dirname, 'uploads')));\napp.use(express.json());\napp.use(express.urlencoded({extended : true}));\napp.use(cookieParser(process.env.COOKIE_SECRET));\nconst sessionOption = {\n    resave : false,\n    saveUninitialized : false,\n    secret : process.env.COOKIE_SECRET,\n    cookie : {\n        httpOnly : true,\n        secure : false,\n    }, \n    store : new RedisStore({client : redisClient}),\n}\n\n//body-parser 미들웨어 설정\napp.use(bodyParser.urlencoded({extended : false}));\napp.use(bodyParser.json());\n\n\n//404 에러 처리 미들웨어\napp.use((req,res,next) =>{\n    const error = new Error('${req.method} ${req.url} 라우터가 없음🧐');\n    error.status = 404;\n    logger.info('왜않돼?');\n    logger.error(error.message);\n    next(error);\n\n})\n\n//500 에러 미들웨어 정의\napp.use((err, req, res, next)=>{\n    res.locals.message = err.message;\n    res.locals.error = process.env.NODE_ENV !== 'production' ? err : {};\n    res.status(err.status || 500);\n    res.render('error'); \n})\n\n\napp.get('/', (req, res) =>{\n    res.sendFile(path.join(__dirname, 'client'))\n})\n\n\n//포트 연결\napp.listen(app.get('port' ,()=>{\n     console.log('${port} 포트입니다.')\n}))\n\n//몽구스 연결\nconst connect =()=>{\n    if (process.env.NODE_ENV !== 'production'){ //개발 모드일때는 debug모드를 사용한다.\n        mongoose.set('debug', true);\n    }\n    mongoose.connect('mongodb://url', {\n       dbName : 'nodejs',\n       useNewUrlParser : true,\n       useCreateIndex : true,\n    } , (error) =>{\n       if (error) {\n          console.log('몽고디비 연결 에러', error);\n       } else {\n          console.log('몽고디비 연결 성공');\n       }\n    });\n };\n \n\n mongoose.connection.on('error' ,(error)=>{\n    console.error('몽고디비 연결 에러', error);\n })\n mongoose.connection.on('disconnected' ,()=>{\n    conosle.error('몽고디비 연결이 끊겼슘니당. 연결 재시도 하겠습니다.');\n    connect();\n })\n module.exports = connect;\n \n\n\n\n\n"
        }
    ]
}